@Tutorial(time: 15) {
    @Intro(title: "Task.yield functionality specifics") {
        Task.sleep is somethin which is presented in code from time to time. Task.yield, in it's turn
        is met less frequent. Let's find out it's specifics and it's difference from the first one.
        
        Important: make sure you have already checked article on Async/Await basics,
        preceeding the tutorial section.

        @Image(source: tutorialTaskYieldLogo, alt: "A person behind the mac laptop over the orange background logo")
    }
    
    @Section(title: "Task.sleep vs Task.yield") {
        @ContentAndMedia {
            Both Task.sleep and Task.yield are used to suspend execution.
            Task.sleep suspends the current task for at least the given duration in nonoseconds. Other tasks within the Task context
            are not allowed to be executed within the waiting time.
            Task.yield allows the same except for the other tasks are allowed to be executed within
            the waiting time.
            
            @Image(source: tutorialSwiftDefaultLogo.png, alt: "Swift logo over the white background")
        }

        @Steps {
            @Step {
                You are free to follow the code using either the pet project or the playground.
                Create a new one and follow along.
            }
            
            @Step {
                Declare a function which simulates a long running task.
                
                @Code(name: "TaskYield", file: TaskYieldCodeSampleStep1.swift)
            }
            
            @Step {
                Declare another function serving the same purpose.
                
                @Code(name: "TaskYield", file: TaskYieldCodeSampleStep2.swift)
            }
            
            @Step {
                Declare a func which calls both of the previously declared functions.
                
                @Code(name: "TaskYield", file: TaskYieldCodeSampleStep3.swift)
            }
            
            @Step {
                Run it's execution and observe the results. As you can see. Both were executed sequentialy
                one by one.
                
                @Code(name: "TaskYield", file: TaskYieldCodeSampleStep4.swift) {
                    @Image(source: taskYieldCodeSampleStep5, alt: "Xcode console output is ordered number sequence")
                }
            }
            
            @Step {
                If you have a very long-running task (or waiting for some updates), you can add `await Task.yield()` which will tell structured concurrency, that it can suspend your code at that point, do some other work scheduled in Tasks or async functions, and then continue to execute your code from that point.
            }
            
            @Step {
                Add a suspension point to the both of the functions, simulating a long running task.
                
                @Code(name: "TaskYield", file: TaskYieldCodeSampleStep5.swift)
            }
            
            @Step {
                Run your code and observe the results once again. Even though both of the tasks are
                executed within the MainActor context we observe concurrent execution flow.
                This is the way Task.yield works.
                
                @Image(source: taskYieldCodeSampleStep6, alt: "Xcode console output is unordered number sequence")
            }
            
            @Step {
                Recap: both Task.sleep and Task.yield allow to suspend task execution.
                The difference is that Task.yield suspends current task execution and allows the system to
                run another pending task within waiting period. After that the switch to the yielding task
                will happen back.
            }
        }
    }
}
